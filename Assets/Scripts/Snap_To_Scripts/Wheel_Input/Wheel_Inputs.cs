//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Snap_To_Scripts/Wheel_Input/Wheel_Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Wheel_Inputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Wheel_Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Wheel_Inputs"",
    ""maps"": [
        {
            ""name"": ""Right_Hand"",
            ""id"": ""92a4423b-d2e7-4af7-b44d-2c8edf625269"",
            ""actions"": [
                {
                    ""name"": ""Move Toggle"",
                    ""type"": ""Value"",
                    ""id"": ""3326d396-840f-4889-b7ee-c0a99be961a7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""05328193-c604-444b-9d21-4c000a1da38c"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Right_Hand
        m_Right_Hand = asset.FindActionMap("Right_Hand", throwIfNotFound: true);
        m_Right_Hand_MoveToggle = m_Right_Hand.FindAction("Move Toggle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Right_Hand
    private readonly InputActionMap m_Right_Hand;
    private List<IRight_HandActions> m_Right_HandActionsCallbackInterfaces = new List<IRight_HandActions>();
    private readonly InputAction m_Right_Hand_MoveToggle;
    public struct Right_HandActions
    {
        private @Wheel_Inputs m_Wrapper;
        public Right_HandActions(@Wheel_Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveToggle => m_Wrapper.m_Right_Hand_MoveToggle;
        public InputActionMap Get() { return m_Wrapper.m_Right_Hand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Right_HandActions set) { return set.Get(); }
        public void AddCallbacks(IRight_HandActions instance)
        {
            if (instance == null || m_Wrapper.m_Right_HandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Right_HandActionsCallbackInterfaces.Add(instance);
            @MoveToggle.started += instance.OnMoveToggle;
            @MoveToggle.performed += instance.OnMoveToggle;
            @MoveToggle.canceled += instance.OnMoveToggle;
        }

        private void UnregisterCallbacks(IRight_HandActions instance)
        {
            @MoveToggle.started -= instance.OnMoveToggle;
            @MoveToggle.performed -= instance.OnMoveToggle;
            @MoveToggle.canceled -= instance.OnMoveToggle;
        }

        public void RemoveCallbacks(IRight_HandActions instance)
        {
            if (m_Wrapper.m_Right_HandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRight_HandActions instance)
        {
            foreach (var item in m_Wrapper.m_Right_HandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Right_HandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Right_HandActions @Right_Hand => new Right_HandActions(this);
    public interface IRight_HandActions
    {
        void OnMoveToggle(InputAction.CallbackContext context);
    }
}
